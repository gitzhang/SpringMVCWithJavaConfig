group "com.github.izhangzhihao"
version "1.0-SNAPSHOT"

buildscript {
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        jcenter()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-snapshot" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE")
    }
}


apply plugin: "java"
apply plugin: "war"
apply plugin: "spring-boot"
apply plugin: "jacoco"
apply plugin: "idea"

war {
    baseName = "SpringMVCSeedProject"
    version = "1.0"
}

springBoot {
    executable = true
}

configurations {
    providedRuntime
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
def SpringBootVersion = "1.4.1.RELEASE"
def HibernateVersion = "5.2.3.Final"
def ShiroVersion = "1.3.2"

repositories {
    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    jcenter()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "https://repo.spring.io/libs-snapshot" }
}

dependencies {
    compile(
            "org.springframework.boot:spring-boot-starter-web:${SpringBootVersion}",
            //"org.springframework.boot:spring-boot-starter-thymeleaf:${SpringBootVersion}",
            "org.springframework.boot:spring-boot-starter-data-jpa:${SpringBootVersion}",
            "org.springframework.boot:spring-boot-starter-test:${SpringBootVersion}",
            "org.springframework.boot:spring-boot-devtools:${SpringBootVersion}",

            //支持jsp
            "org.apache.tomcat.embed:tomcat-embed-jasper:8.5.4",

            //springfox
            "io.springfox:springfox-swagger2:2.6.0",
            "io.springfox:springfox-swagger-ui:2.6.0",

            //Spring-Session
            "org.springframework.session:spring-session:1.2.2.RELEASE",
            "org.springframework.data:spring-data-redis:1.7.4.RELEASE",

            //jedis
            "redis.clients:jedis:2.9.0",
            "org.apache.commons:commons-pool2:2.4.2",

            //监控
            "org.springframework.boot:spring-boot-starter-actuator:${SpringBootVersion}",
            //"de.codecentric:spring-boot-admin-starter-client:1.4.1",
            //"org.jolokia:jolokia-core:1.3.4",

            //apache
            "commons-fileupload:commons-fileupload:1.3.2",
            "org.apache.commons:commons-lang3:3.4",//深拷贝

            // MySQL
            "mysql:mysql-connector-java:6.0.4",

            //Hibernate
            "org.hibernate:hibernate-core:${HibernateVersion}",
            "org.hibernate:hibernate-validator:5.3.0.Final",

            //ehcache
            "org.ehcache:ehcache:3.1.2",
            "org.hibernate:hibernate-ehcache:${HibernateVersion}",

            //C3P0
            "com.mchange:c3p0:0.9.5.2",
            "org.hibernate:hibernate-c3p0:${HibernateVersion}",

            //shiro
            "org.apache.shiro:shiro-core:${ShiroVersion}",
            "org.apache.shiro:shiro-spring:${ShiroVersion}",
            "org.apache.shiro:shiro-web:${ShiroVersion}",
            "org.apache.shiro:shiro-ehcache:${ShiroVersion}",

            //Lombok
            "org.projectlombok:lombok:1.16.10",

            //@NotNull
            "org.jetbrains:annotations:15.0",

            //Groovy
            "org.codehaus.groovy:groovy:2.4.7",
    )
    testCompile(
            //jUnit
            "junit:junit:4.12",
    )
}

task copyJars(type: Copy) {
    from configurations.runtime
    into "lib" //复制到lib目录
}

//让gradle支持中文
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

test {
    useJUnit()
    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

build.dependsOn jacocoTestReport

task integrationTest(type: Test) {
    include 'test/java/**'
}